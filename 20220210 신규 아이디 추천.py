
# 정규식 개념 알기

# 문자 클래스
# [] : []사이의 문자들과 매치
# - : 두 문자 사이의 범위를 말함.

# 메타문자
# | : or과 동일한 의미
# \ : \이후 들어오는 값을 탐색
# ^ : 문자열의 맨 처음과 일치함을 의미, [] 안에서는 not을 의미
# $ : 문자열의 끝과 매치함을 의미
# \A : 문자열의 처음과 일치함을 의미(줄과 상관 없이 전체 문자열의 처음하고 매치)
# \Z : 문자열의 끝과 매치함을 의미 (전체 문자열의 끝과 매치함)
# \b : 단어 구분자 (whitespace - 띄어쓰기)에 의해 구분
# \B : 단어 구분자 (whitespace - 띄어쓰기)가 아닌 경우에만 구분
# . : 줄바꿈 문자인 \n을 제외한 모든 문자와 매치됨
# + : 최소 1번 이상 반복될때 사용
# * : 0번 이상 반복될때 사용

import re #정규식 표현식(regular expression)을 사용

def solution(new_id):
    st = new_id #st를 new_id로 선언
    st = st.lower() #1단계 : re.lower() : 대분자를 소문자로 치환
    st = re.sub('[^a-z0-9\-_.]', '', st) #re.sub('찾을 패턴', '바꿀 문자열', '대상 변수')
                                         #2단계 : []안의 ^로 인해 not~ 으로 바뀌어 [] 안의 문자를 제외하고 전부 제거함
    st = re.sub('\.+', '.', st) #3단계 : .이 최소 1번 이상 반복될때 . 으로 바꿔줌
    st = re.sub('^[.]|[.]$', '', st) # 4단계 : .이 처음이나 맨 끝에 온다면 제거함
    st = 'a' if len(st) == 0 else st[:15] # 5단계 & 6단계 : st의 길이가 0이라면 a를 추가, 그렇지 않으면 0번째~14번째까지로 indexing
    st = re.sub('^[.]|[.]$', '', st) #6단계 : .이 처음이나 맨 끝에 온다면 제거함
    st = st if len(st) > 2 else st + "".join([st[-1] for i in range(3-len(st))])# join() : 문자열을 합쳐주는 기본내장 함수
                                                                                # [-1] : list의 마지막 값을 출력
                                                                                # 7단계 : len의 글자가 2자 초과이면 그대로 사용, 그렇지 않으면 3에서 부족한 개수만큼 마지막 글자를 반복
    return st